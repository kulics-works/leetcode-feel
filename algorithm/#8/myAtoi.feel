myAtoi = (str: str -> v: int) {
    automaton = Automaton{}
    automaton.init()
    str @ ch {
        automaton.Get(ch)
    }
    <- automaton.Sign * (automaton.Ans !! int)
}

START   = "start"
SIGNED  = "signed"
IN_NUM  = "in_number"
END     = "end"

GetCol = (c: chr -> v: int) {
    c == ' ' ? {
        <- 0
    }
    | c == '+' || c == '-' ? {
        <- 1
    }
    | c >= '0' && c <= '9' ? {
        <- 2
    }
    <- 3
}

Automaton = $ {
    !State: str
    !Map: dict`str`(list`str)
    !Sign: int
    !Ans: i64
    
    Get = (c: chr ->) {
        State = Map[State][GetCol(c)]
        State == IN_NUM ? {
            Ans = Ans * 10 + c - '0'
            Sign == 1 ? {
                Ans = min(Ans, 2147483647)
            }
            | ? {
                Ans = min(Ans, 2147483648)
            }
        }
        | State == SIGNED ? {
            c == '+' ? {
                Sign = 1
            }
            | ? {
                Sign = -1
            }
        } 
    }

    init = (->) {
        State = START
        Sign = 1

        Map = {
            [START] = {START; SIGNED; IN_NUM; END}
            [SIGNED] = {END; END; IN_NUM; END}
            [IN_NUM] = {END; END; IN_NUM; END}
            [END] = {END; END; END; END}
        }
    }
}
