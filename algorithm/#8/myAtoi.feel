MyAtoi := (str : Str -> v : Int) {
    automaton := NewAutomaton()
    @ ch := str... {
        automaton.Get(ch)
    }
    <- automaton.sign * automaton.ans.[Int]
}

START   := "start"
SIGNED  := "signed"
IN_NUM  := "in_number"
END     := "end"

GetCol := (c : Chr -> v : Int) {
    ? c == ' ' {
        <- 0
    } | c == '+' || c == '-' {
        <- 1
    } | c >= '0' && c <= '9' {
        <- 2
    }
    <- 3
}

Automaton := $(
    state: Str,
    map: Dict[Str, List[Str]],
    sign: Int,
    ans: I64
) {
    Get := (c: Chr ->) {
        state = map.Get(state).Get(GetCol(c))
        ? state == IN_NUM {
            ans = ans * 10 + c - '0'
            ? sign == 1 {
                ans = Min(ans, 2147483647)
            } | {
                ans = Min(ans, 2147483648)
            }
        } | state == SIGNED {
            ? c == '+' {
                sign = 1
            } | {
                sign = -1
            }
        } 
    }
}

NewAutomaton := (->v : Automaton) {
    <- Automaton(START, 1, Dict_of(
            Pair_of(START, List_of(START, SIGNED, IN_NUM, END)),
            Pair_of(SIGNED, List_of(END, END, IN_NUM, END)),
            Pair_of(IN_NUM, List_of(END, END, IN_NUM, END)),
            Pair_of(END, List_of(END, END, END, END))
        ), 0)
}