canFinish := (numCourses: int, prerequisites: [list [list int]]->can: bool) {
    #: get the indegree for each course
    indegrees := [list int](numCourses)
	adjecency := [list [list int]](numCourses)
	@ p := prerequisites {
		indegrees[p[1]] += 1
		adjecency[p[0]].add(p[1])
	}
    #: put courses with indegree == 0 to queue
    queue := [list int](0)
	@ [courseIdx]indegree := indegrees {
		? indegree == 0 {
			queue.add(courseIdx)
		}
	}
	#: bfs
	@ queue.len > 0 {
		cur := queue[0]
		queue.removeAt(0)
		numCourses -= 1
        #: remove the pre == cur
		@ cur := adjecency[cur] {
			indegrees[cur] -= 1
			? indegrees[cur] == 0 {
				queue.add(cur)
			}
		}
	}
	<- numCourses == 0
}