// Definition for a binary tree node.
TreeNode := $ (
    val : Int,
    left : ?TreeNode,
    right : ?TreeNode
) {}

DeleteNode := (root : ?TreeNode, key : Int->v : ?TreeNode) {
    ? root == nil {
        <- nil
    }
    ? root.val < key {
        root.right = DeleteNode(root.right, key)
    } | root.val > key {
        root.left = DeleteNode(root.left, key)
    } | {
        ? root.left == nil && root.right == nil {
            root = nil
        } | root.right <> nil {
            root.val = RightMin(root)
            root.right = DeleteNode(root.right, root.val)
        } | {
            root.val = LeftMax(root)
            root.left = DeleteNode(root.left, root.val)
        }
    }
    <- root
}

RightMin := (root : ?TreeNode->v : Int) {
    root = root.right
    @ root.left <> nil {
        root = root.left
    }
    <- root.val
}

LeftMax := (root : ?TreeNode->v : Int) {
    root = root.left
    @ root.right <> nil {
        root = root.right
    }
    <- root.val
}
