ThreeSum := (nums : List[Int]->v : List[List[Int]]) {
    nums.Sort()
    arr := List_of[List[Int]]()
    length := nums.Size()
    @ i := 0.Up_until(length - 1)... {
        ? nums.Get(i) > 0 {
            @ <-
        }
        ? i > 0 && nums.Get(i) == nums.Get(i - 1) {
            @
        }
        l, r := i + 1, length - 1
        @ l < r {
            sum = nums.Get(l) + nums.Get(r) + nums.Get(i)
            ? sum == 0 {
                arr.Append(List_of(nums.Get(l), nums.Get(r), nums.Get(i)))
                @ l < r && nums.Get(l) == nums.Get(l + 1) {
                    l += 1
                }
                @ l < r && nums.Get(r) == nums.Get(r - 1) {
                    r -= 1
                }
                l += 1
                r -= 1
            } | sum < 0 {
                l += 1
            } | sum > 0 {
                r -= 1
            }
        }
    }
    <- arr
}
