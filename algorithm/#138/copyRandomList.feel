// Definition for a Node.
Node := $(
    val : Int,
    next : ?Node,
    random : ?Node
) {}

tempmap := Dict_of[?Node, ?Node]()
CopyRandomList := (head : ?Node->v : ?Node) {
    ? head == nil {
        <- nil
    }
    ? tempmap.Contains(head) {
        <- tempmap.Get(head)
    }

    newNode : ?Node = Node$(head.val, nil, nil)

    tempmap.Set(head, newNode)

    newNode.next = CopyRandomList(head.next)
    newNode.random = CopyRandomList(head.random)
    <- newNode
}
