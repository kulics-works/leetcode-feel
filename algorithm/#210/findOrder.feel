FindOrder = (numCourses: Int, prerequisites: ((Int)List)List->order: (Int)List) {
    ` get the indegree for each course `
    indegrees = (Int)New_List(numCourses)
	edges = ((Int)List)New_List(numCourses)
	@ prerequisites => p {
		indegrees[p[0]] += 1
		edges[p[1]].Append(p[0])
	}
    ` put courses with indegree == 0 to queue `
    queue = (Int)New_List(0)
	@ indegrees => [courseIdx]indegree {
		? indegree == 0 {
			queue.Append(courseIdx)
		}
	}
	` bfs `
    order = (Int)New_List(0)
	@ queue.Size() > 0 {
		cur = queue[0]
		queue.RemoveAt(0)
		numCourses -= 1
        order.Append(cur)
        ` remove the pre == cur `
		@ edges[cur] => v {
			indegrees[v] -= 1
			? indegrees[v] == 0 {
				queue.Append(v)
			}
		}
	}
	? numCourses == 0 {
        <- order
    } | {
        <- nil
    }
}
