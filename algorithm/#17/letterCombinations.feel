LetterCombinations := (digits : Str->v : List[Str]) {
    ? digits.Size() <> 0 {
        Backtrack("", digits)
    }
    <- output
}

Backtrack := (combination : Str, next : Str->) {
    ? next.Size() == 0 {
        output.Append(combination)
    } | {
        @ v := phone.Get(next.Get(0))... {
            Backtrack(combination + v, next.Slice(1, nil))
        }
    }
}

output := List_of[Str]()
dict := Dict_of(
    Pair_of("2", "abc"),
    Pair_of("3", "def"),
    Pair_of("4", "ghi"),
    Pair_of("5", "jkl"),
    Pair_of("6", "mno"),
    Pair_of("7", "pqrs"),
    Pair_of("8", "tuv"),
    Pair_of("9", "wxyz")
)