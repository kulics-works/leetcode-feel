` Definition for singly-linked list. `
ListNode = $ (
    val: Int,
    next: ListNode?
}

ReverseKGroup = (head: ListNode?, k: Int->v: ListNode?) {
    ? head == nil || head.next == nil {
        <- head
    }
    tail = head
    @ 0 .. k => i {
        ? tail == nil {
            <- head
        }
        tail = tail.next
    }
    newhead = ReverseList(head, tail)
    head.next = ReverseKGroup(tail, k)
    <- newhead
}

ReverseList = (head: ListNode?, tail: ListNode?->v: ListNode?) {
    prev: ListNode? = nil
    curr = head
    @ curr <> tail {
        nextTemp = curr.next
        curr.next = prev
        prev = curr
        curr = nextTemp
    }
    <- prev
}
