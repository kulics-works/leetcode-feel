// Definition for singly-linked list.
ListNode = $ (
    val : Int,
    next : ?ListNode
) {}

RotateRight := (head : ?ListNode, k : Int->v : ?ListNode) {
    ? head == nil {
        <- nil
    }
    ? head.next == nil {
        <- head
    }
    arr := List_of[ListNode]()
    temp := head
    @ temp <> nil {
        arr.Append(temp)
        ? temp.next <> nil {
            temp = temp.next
        } | {
            temp = nil
        }
    }
    ? k % arr.Size() == 0 {
        <- head
    } | k > arr.Size() {
        k = k % arr.Size()
    } 
    arr.Get(arr.Size() - 1).next = arr.Get(0)
    arr.Get(arr.Size() - 1 - k).next = nil
    <- arr.Get(arr.Size() - k)
}
