FourSum := (nums : List[Int], target : Int->v: List[List[Int]]) {
    nums.Sort()
    arr := List_of[List[Int]]()
    length := nums.Size()
    ? length < 4 {
        <- arr
    }
    ? nums.Get(0) + nums.Get(1) + nums.Get(2) + nums.Get(3) > target ||
    nums.Get(length - 1) + nums.Get(length - 2) + nums.Get(length - 3) + nums.Get(length - 4) < target {
        <- arr
    }
    @ i := 0.Up_until(length - 3)... {
        ? i > 0 && nums.Get(i) == nums.Get(i - 1) {
            @
        }
        ? nums.Get(i) + nums.Get(i + 1) + nums.Get(i + 2) + nums.Get(i + 3) > target {
            @ <-
        }
        ? nums.Get(i) + nums.Get(length - 3) + nums.Get(length - 2) + nums.Get(length - 1) < target {
            @
        }
        @ j := (i + 1).Up_until(length - 2)... {
            ? j > i + 1 && nums.Get(j) == nums.Get(j - 1) {
                @
            }
            ? nums.Get(i) + nums.Get(j) + nums.Get(j + 1) + nums.Get(j + 2) > target {
                @ <-
            }
            ? nums.Get(i) + nums.Get(j) + nums.Get(length - 2) + nums.Get(length - 1) < target {
                @
            }
            l, r := j + 1, length - 1
            @ l < r {
                sum = nums.Get(i) + nums.Get(j) + nums.Get(l) + nums.Get(r)
                ? sum == target {
                    arr.Append(List_of(nums.Get(i), nums.Get(j), nums.Get(l), nums.Get(r)))
                    @ l < r && nums.Get(l) == nums.Get(l + 1) {
                        l += 1
                    }
                    @ l < r && nums.Get(r) == nums.Get(r - 1) {
                        r -= 1
                    }
                    l += 1
                    r -= 1
                } | sum < target {
                    l += 1
                } | sum > target {
                    r -= 1
                }
            }
        }
    }
    <- arr
}